{"meta":{"title":"BenDan","subtitle":null,"description":"我可以划船不用浆！我可以扬帆没有风向！因为我这一生！全靠浪！","author":"BenDan","url":"http://bendan.vip"},"pages":[{"title":"书籍","date":"2016-08-24T02:32:42.433Z","updated":"2016-08-24T02:32:42.433Z","comments":true,"path":"book/index.html","permalink":"http://bendan.vip/book/index.html","excerpt":"","text":"BenDan 为大家推荐一些好的书籍作品"},{"title":"分类","date":"2016-08-23T00:47:28.044Z","updated":"2016-08-22T15:05:38.891Z","comments":true,"path":"categories/index.html","permalink":"http://bendan.vip/categories/index.html","excerpt":"","text":""},{"title":"关于","date":"2016-08-23T00:47:28.043Z","updated":"2016-08-22T15:32:12.566Z","comments":true,"path":"about/index.html","permalink":"http://bendan.vip/about/index.html","excerpt":"","text":"我可以划船不用浆！我可以扬帆没有风向！因为我这一生！全靠浪！ 大家好，我是 BenDan ,欢迎来到我的博客。 有什么意见或建议可以在下方留言，谢谢"},{"title":"电影","date":"2016-08-24T02:31:55.304Z","updated":"2016-08-24T02:31:55.304Z","comments":true,"path":"movie/index.html","permalink":"http://bendan.vip/movie/index.html","excerpt":"","text":"BenDan 收藏的一些经典影视作品"},{"title":"标签","date":"2016-08-24T03:39:00.138Z","updated":"2016-08-24T03:39:00.138Z","comments":true,"path":"tags/index.html","permalink":"http://bendan.vip/tags/index.html","excerpt":"","text":""}],"posts":[{"title":" Markdown语法介绍","slug":"Markdown语法介绍","date":"2016-08-24T06:06:29.000Z","updated":"2016-08-24T06:30:56.565Z","comments":true,"path":"2016/08/24/Markdown语法介绍/","link":"","permalink":"http://bendan.vip/2016/08/24/Markdown语法介绍/","excerpt":"##什么是Markdown语法？## Markdown 是一种轻量级标记语言，目标是实现「易读易写」。Coding.net的许多版块都采用了Markdown语法，比如冒泡，讨论，Pull Request等。","text":"##什么是Markdown语法？## Markdown 是一种轻量级标记语言，目标是实现「易读易写」。Coding.net的许多版块都采用了Markdown语法，比如冒泡，讨论，Pull Request等。 标题在Markdown中，你只需要在文本前面加上# 即可，同理、你还可以增加二级标题、三级标题、四级标题、五级标题和六级标题，总共六级，只需要增加# 即可，标题字号相应降低。例如： 123456# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题 点击预览可以看到效果： 引用Markdown 标记区块引用是使用类似 email 中用 &gt; 的引用方式，只需要在整个段落的第一行最前面加上 &gt; ： 1&gt; 时光静好，与君语；细水流年，与君同。-- BenDan","categories":[{"name":"HEXO","slug":"HEXO","permalink":"http://bendan.vip/categories/HEXO/"},{"name":"HELP","slug":"HEXO/HELP","permalink":"http://bendan.vip/categories/HEXO/HELP/"}],"tags":[{"name":"HEXO","slug":"HEXO","permalink":"http://bendan.vip/tags/HEXO/"},{"name":"Markdown","slug":"Markdown","permalink":"http://bendan.vip/tags/Markdown/"}],"keywords":[{"name":"HEXO","slug":"HEXO","permalink":"http://bendan.vip/categories/HEXO/"},{"name":"HELP","slug":"HEXO/HELP","permalink":"http://bendan.vip/categories/HEXO/HELP/"}]},{"title":"GitHub+Hexo配置系列教程-Hexo+GitHub关联-三","slug":"GitHub-Hexo配置系列教程-Hexo-GitHub关联-三","date":"2016-08-23T08:43:57.000Z","updated":"2016-08-24T00:53:26.121Z","comments":true,"path":"2016/08/23/GitHub-Hexo配置系列教程-Hexo-GitHub关联-三/","link":"","permalink":"http://bendan.vip/2016/08/23/GitHub-Hexo配置系列教程-Hexo-GitHub关联-三/","excerpt":"上一篇中我们介绍了如何配置GitHub端的具体操作,接下来,就是将Hexo与GitHub进行关联 在Hexo配置文件中关联GitHub账号 1.找到刚才所建的目录(F:\\Hexo下),编辑 _config.yml,拖到最下方,找到deploy标签,然后更为如下配置,注意:你自己在修改时,需要将 bentoule修改为自己的用户名 1234567deploy: type: git repository: git@github.com:bentoule/bentoule.github.io.git branch: master","text":"上一篇中我们介绍了如何配置GitHub端的具体操作,接下来,就是将Hexo与GitHub进行关联 在Hexo配置文件中关联GitHub账号 1.找到刚才所建的目录(F:\\Hexo下),编辑 _config.yml,拖到最下方,找到deploy标签,然后更为如下配置,注意:你自己在修改时,需要将 bentoule修改为自己的用户名 1234567deploy: type: git repository: git@github.com:bentoule/bentoule.github.io.git branch: master 2.注意: 因yml格式问题,所有键值对的”:”冒号后面必须跟有一个空格 3.注意: 自Hexo 3.0以后,type类型都为 git,而非 github 4.然后在F:/Hexo目录下,右键,选择Git Bash,输入以下命令即可完成部署和同步命令如下: 12$ hexo generate #或 hexo g $ hexo deploy #或 hexo d 5.到此我们的博客已经完全搭建并关联起来了,现在在浏览器中访问bentoule.github.io即可看到自己的成就.注意事项 每次在本地进行改动后,不管是什么改动,都需要在F:\\Hexo 文件夹下打开Git Bash,执行hexo g 如果需要同步到github中,则在执行完hexo g命令后,再次执行hexo d即可 在执行hexo d命令时,会让输入你的github邮箱和密码,在输入密码时为了安全考虑,输入字符时是不会显示的,请放心输入 有的电脑在执行hexo d命令时,会出现ERROR Deployer not found: github 的错误提示,该错误原因有以下几点 在_config.yml文件中,deploy模块中冒号后面没有加空格 将type类型写成了github,正确写法是git 在改文件夹下执行 npm install hexo-deployer-git –save 命令后重新执行 hexo d命令 将Git Bash命令关掉,重新打开执行 6.在github端设置完成后,有时候直接访问会出现404错误,这是正常的,一般等待十分钟左右就可以访问了,如果还不行,可能是你在注册账号的时候没有验证邮箱中的邮件. 7.如遇到其他不可解决的问题,可以尝试删除.deploy_git文件夹及db.json,再次重新生成即可 发布一篇文章 既然博客已经搭建完毕,现在肯定想跃跃欲试,发布一篇博客,所以我们需要更改一些默认设置,来将站点打造成真正属于自己的网站. 博客配置一般需要用到两个文件,一个是对全局进行配置的_config.yml文件,另一个是对主题进行配置的文件(暂时还没有设置,找到后后续补充) F:\\Hexo_config.yml 12345678910# Hexo Configuration ## Docs: https://hexo.io/docs/configuration.html ## Source: https://github.com/hexojs/hexo/# Site title: Test #网站名称 subtitle: Test #副标题,在titile下方可看到 description: des #描述,可自定义 author: au #作者,可以在左下角看到 language: zh-CN #中文 timezone: PRC #时区 People's Republic of China，中华人民共和国 现在可以执行hexo g和hexo d命令来查看更改的效果了. 发布文章 1.在F:\\Hexo下打开Git Bash命令,执行hexo n “This my first blog” 2.创建成功后,就可以在F:\\Hexo\\source_posts中看到该md文件,在这里,可以使用MarkdownPad 2 或者 记事本 打开,然后进行自定义更改 1234 title: This my first blog #这里是正文,可以更改date: 2016-03-21 22:58:49 #时间戳,一般不改tags: Test #分类标签 --- #下面是正文,可以使用Markdown语法进行书写 3.然后执行hexo g和hexo d命令,即可在github上查看效果 小贴士:当然,你也可以执行hexo g和hexo s命令在本地打开localhost:4000进行本地访问,然后在同步到GitHub上.","categories":[{"name":"HEXO","slug":"HEXO","permalink":"http://bendan.vip/categories/HEXO/"}],"tags":[{"name":"HEXO","slug":"HEXO","permalink":"http://bendan.vip/tags/HEXO/"},{"name":"HEXO配置","slug":"HEXO配置","permalink":"http://bendan.vip/tags/HEXO配置/"},{"name":"Github","slug":"Github","permalink":"http://bendan.vip/tags/Github/"}],"keywords":[{"name":"HEXO","slug":"HEXO","permalink":"http://bendan.vip/categories/HEXO/"}]},{"title":"GitHub+Hexo配置系列教程-GitHub配置(二)","slug":"GitHub-Hexo配置系列教程-GitHub配置-二","date":"2016-08-23T02:41:06.000Z","updated":"2016-08-23T08:36:17.494Z","comments":true,"path":"2016/08/23/GitHub-Hexo配置系列教程-GitHub配置-二/","link":"","permalink":"http://bendan.vip/2016/08/23/GitHub-Hexo配置系列教程-GitHub配置-二/","excerpt":"上一篇中我们介绍了如何搭建Hexo本地博客,现在我们开始配置GitHub并进行关联Hexo GitHub端操作注册GitHub 在此处进行注册,操作比较简单,再次就不多做赘述,不熟悉的百度查看一下教程. 创建Repository 在自己GitHub主页点击右上角,创建Repository","text":"上一篇中我们介绍了如何搭建Hexo本地博客,现在我们开始配置GitHub并进行关联Hexo GitHub端操作注册GitHub 在此处进行注册,操作比较简单,再次就不多做赘述,不熟悉的百度查看一下教程. 创建Repository 在自己GitHub主页点击右上角,创建Repository 进入创建界面后,注意:名字一定要与用户名一致, 比如我的用户名是 bentoule,创建的Respository一定要是bentoule.github.io 然后点击Create repository按钮,然后进入到该respository界面,点击右边Settings, 拉到最下方,找到GitHub Pages模块,点击 Launch automatic page generator,让GitHub生成GitHubPager 然后进入下一页,点击页面右下角绿色框按钮 Continue to layouts进入下一页 下一个界面是选择主题,但选择哪个无所谓,因为后面将要与Hexo关联,站点所有内容都将被Hexo博客所替换,所以直接点击 Publish page 然后,就可以进入到该界面,即代表设置完成,访问bentoule.github.io即可看到自己独立的该域名网站. 此时点击Settings进入即可看到如下提示:Your sit is published at http://bentoule.github.io 配置SSH KeysSSH密钥是一个用来识别值得信赖的电脑在进行GitHub一些操作时,不用输入密码。用户可以生成一个SSH密钥，并按照本节所述的方法将公共密钥添加到你的GitHub帐户。 我们建议你定期检查SSH密钥列表，并删除任何一个长时间没有使用的秘钥. 小贴士:如果你安装的有GitHub的桌面版 ，你可以用它来克隆库而不是进行SSH密钥处理。它还配备了Git的Bash的工具，这是在Windows上运行的git命令的首选方式。检测电脑中是否已有SSH 秘钥 在你生成SSH秘钥之前,如果你有任意一个SSH秘钥,你都要检测一下; 检测步骤: 在任意目录右键,选择 Git Bash 输入 ls -al ~/.ssh 命令查看是否存在SSH秘钥 12ls -al ~/.ssh # Lists the files in your .ssh directory, if they exist 如果你看到有公共的SSH秘钥已经存在的话,请检测SSH列表的路径; 默认情况下,公共秘钥的文件名是下列之一: id_dsa.pub id_ecdsa.pub id_ecdsa.pub id_ecdsa.pub 如果没有一个现有的公共和私有密钥，或者不希望使用任何可用的SSH秘钥来连接到GitHub上，请生成一个新的SSH密钥。 如果你看到列出现有的公共和私有密钥（例如id_rsa.pub和id_rsa ），你想使用连接到GitHub上，你可以将你的SSH密钥放到ssh-agent(下面会写到) . 小贴士:如果你看到的〜/ .ssh不存在或者错误，不要担心！我们将创建它，并生成一个新的SSH密钥 生成新的SSH密钥并将其添加到ssh-agent中 在任意目录右键,选择Git Bash 输入ssh-keygen -t rsa -b 4096 -C “your_email@example.com” (将邮箱替换为你自己的地址) 123$ ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"# Creates a new ssh key, using the provided email as a label#Generating public/private rsa key pair. 当你提示“输入要保存密钥的文件”，然后按Enter键。接受默认文件位置。Enter a file in which to save the key (/Users/you/.ssh/id_rsa): [Press enter] 在提示符下，键入一个安全密码(可以为空)。有关详细信息，请参阅“使用SSH密钥口令”一节。Enter passphrase (empty for no passphrase): [Type a passphrase]Enter same passphrase again: [Type passphrase again] 将ssh秘钥添加到 ssh-agent,在任意目录右键,选择Git Bash后输入命令确保ssh-agent的启用 123# start the ssh-agent in the background$ eval \"$(ssh-agent -s)\"# Agent pid 59566 添加你的SSH密钥到ssh-agent 。如果你使用现有的SSH密钥，而不是生成新的SSH密钥，你需要替换现有的私有密钥文件的名称，以取代id_rsa的命令 1$ ssh-add ~/.ssh/id_rsa 添加新的SSH密钥到你的帐户GitHub中 要配置GitHub的帐户需要使用新的（或现有的） SSH密钥，你还需要将其添加到你的帐户GitHub中。 复制SSH密钥到剪贴板 小贴士:如果你的SSH密钥文件具有与示例代码不同的名称，请修改文件名，以符合当前的设置。当复制你的秘钥时，不添加任何新行或空格。 12$ clip &lt; ~/.ssh/id_rsa.pub# Copies the contents of the id_rsa.pub file to your clipboard 小贴士:如果clip命令没有执行，你可以找到隐藏的.ssh文件夹中，打开你喜欢的文本编辑器文件，并将其复制到剪贴板,一般是在C:\\Users\\yourname.ssh文件夹下的id_rsa.pub文件中,使用文本文档打开后复制内容即可 在GitHub任何界面中,点击右上角个人资料照片,选择Settings 在用户设置栏中，点击SSH AND GPG keys 然后点击 New SSH key 在“Title”字段中，为新的密钥添加描述性标签。例如，如果您使用的是个人的Mac ，您可以调用这个关键的“个人的MacBook Air ” 。 粘贴刚才复制的秘钥值到“key”框中。 然后点击Add SSH key 确认操作,然后输入你的GitHub密码。 测试SSH秘钥是否添加成功 小贴士:当你测试你的连接，你需要使用你的密码，这是你先前创建的SSH密钥密码来验证这个动作。有关使用SSH密钥口令的详细信息，请参阅”使用SSH密钥口令”一节。 在任意位置右键,打开Git Bash 输入以下命令ssh -T git@github.com 12$ ssh -T git@github.com# Attempts to ssh to GitHub 你可能会看到这些警告之一： The authenticity of host ‘github.com (192.30.252.1)’ can’t be established.RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48. Are you sure you want to continue connecting (yes/no)? The authenticity of host ‘github.com (192.30.252.1)’ can’t be established.RSA key fingerprint is nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.Are you sure you want to continue connecting (yes/no)? 小贴士:上面的例子列出了GitHub的IP地址为192.30.252.1 。当侦测GitHub上，你可能会看到一个IP地址范围。有关更多信息，请参阅“不GitHub上使用什么IP地址，我应该列入白名单？ ” 验证你看到消息中的指纹相匹配的以下信息，然后输入 yes Hi username! You’ve successfully authenticated, but GitHub does notprovide shell access. 小贴士:验证结果消息中包含的用户名。如果你看到一个包含“access denied “的错误,请参阅：”权限被拒绝文档” 如果你从HTTPS切换到SSH，你需要更新远程存储库的URL。 ok,如果以上都完成了,那我们GitHub端的工作已经完成,接下来,就是Hexo+GitHub的关联配置","categories":[{"name":"HEXO","slug":"HEXO","permalink":"http://bendan.vip/categories/HEXO/"}],"tags":[{"name":"HEXO","slug":"HEXO","permalink":"http://bendan.vip/tags/HEXO/"},{"name":"HEXO配置","slug":"HEXO配置","permalink":"http://bendan.vip/tags/HEXO配置/"},{"name":"Github","slug":"Github","permalink":"http://bendan.vip/tags/Github/"}],"keywords":[{"name":"HEXO","slug":"HEXO","permalink":"http://bendan.vip/categories/HEXO/"}]},{"title":"GitHub+Hexo 配置系列教程 -HEXO配置 （一）","slug":"GitHub-Hexo-配置系列教程-HEXO配置-（一）","date":"2016-08-21T00:13:13.000Z","updated":"2016-08-23T02:11:41.204Z","comments":true,"path":"2016/08/21/GitHub-Hexo-配置系列教程-HEXO配置-（一）/","link":"","permalink":"http://bendan.vip/2016/08/21/GitHub-Hexo-配置系列教程-HEXO配置-（一）/","excerpt":"什么是HexoHexo是一个快速、简洁且高效的博客框架,可以方便的生成静态网页托管在github和Heroku上。作者是来自台湾的@tommy351。引用@tommy351的话，Hexo:","text":"什么是HexoHexo是一个快速、简洁且高效的博客框架,可以方便的生成静态网页托管在github和Heroku上。作者是来自台湾的@tommy351。引用@tommy351的话，Hexo: 快速、简单且功能强大的 Node.js 博客框架。 A fast, simple &amp; powerful blog framework, powered by Node.js. 类似于jekyll、Octopress、Wordpress，我们可以用hexo创建自己的博客，托管到github或Heroku上，绑定自己的域名，用markdown写文章。本博客即使用hexo创建并托管在github上。 为什么要用Hexo来写博客引用原作者的话来说: 超快速度: Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。 支持 Markdown: Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。 一键部署: 只需一条指令即可部署到 GitHub Pages, Heroku 或其他网站。 丰富的插件: Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。 另外,还有几个优点另Hexo这么风靡: 易用. 部署的话,就算是小白,也很简单, 而且平时用到的命令仅需要 hexo new hexo server hexo generate hexo deploy四个命令即可,不像Jekyll需要很多繁琐的git命令,而且目前命令已经可以缩写成hexo n hexo d hexo s hexo g了,更加简单好记易用 轻便. 文件少,小,易理解,方便自定义更改 用户多. 用户的量级虽然比不上Jekyll,但遇到什么问题基本在网上搜索出来就能搞定了. 使用Hexo需要花多大的成本 这是一个免费的开源的博客框架,任何人都可以修改和使用 Hexo的使用需要使用到GitHub,Git,MardDown,Node.js这几种工具,另外部分插件,主题,widget需要自己安装,设置.所以使用Hexo相对有一些计算机基础的人比较简单, 但是即使是小白,只要按照这个教程,也可以很快的入手. 注意本博客所用Hexo版本为3.2.0,部分文件或与其他版本不同.本教程只针对Windows版本, Hexo博客搭建安装Git推荐大家使用：msysgit https://git-for-windows.github.io/下载并安装Git即可完成. 安装Node.jswindows环境下的Node.js的安装很简单,只需要下载客户端一路next就行了,我选择的是v6.4.0LTS版本64位的 查看Node.js是否安装完成,在win+r中输入cmd命令窗口弹出后,输入node -v查看node版本 1node -v 安装Hexo (需要注意)利用命令行安装hexo Node.js安装完成后,在电脑任意位置,右键,选择 GitBash ,执行npm命令 1npm install -g hexo 创建本地hexo文件夹(地址名字可自定义) 安装完成后,在本地选择一个目标文件夹(如:F:\\Hexo),注意:在F:\\Hexo文件夹内右键,选择GitBush,执行以下指令,Hexo就会自动在目标文件夹下创建建立网站所需要的文件,一分钟左右会执行完成1hexo init 效果如下: 安装依赖包,该命令执行后没有什么提示,完成后的本地文件夹列表为图示,可能会有所不同1hexo install 初始化完成后目录图: 注意:因Hexo 3.0以后把服务器独立成了单独的模块,所以还需要安装hexo-server才可以使用,执行命令1npm install hexo-server –save 本地校验查看 到目前为止,我们已经搭建起本地的hexo博客了,执行以下命令(在F:\\Hexo)中,然后根据提示到浏览器中进行访问,地址为 localhost:4000 1hexo g 或者 hexo generate 1hexo server 或者 hexo s 图示为: 如果访问成功,即代表了本地博客配置成功,但有以下几点需要注意 每次想访问本地博客,至少需要执行hexo s命令,这样才相当于服务启动,然后才可访问 有的电脑4000端口可能被占用,导致每次访问localhost:4000提示一直找不到网页,这时就需要修改端口号,执行命令 hexo s -p 5000 即代表使用-p将端口号改为了5000,访问网址为localhost:5000 成功图示 : 按下Ctrl+C即可停止服务 如果进行到这一步,本地博客已经成功搭建起来了,当然只能在本地开启服务的时候才能访问,别人是看不到的,下面我们就要部署到GitHub上面,将Hexo与GitHub进行关联起来;","categories":[{"name":"HEXO","slug":"HEXO","permalink":"http://bendan.vip/categories/HEXO/"}],"tags":[{"name":"HEXO","slug":"HEXO","permalink":"http://bendan.vip/tags/HEXO/"},{"name":"HEXO配置","slug":"HEXO配置","permalink":"http://bendan.vip/tags/HEXO配置/"},{"name":"node.js","slug":"node-js","permalink":"http://bendan.vip/tags/node-js/"},{"name":"GIT","slug":"GIT","permalink":"http://bendan.vip/tags/GIT/"},{"name":"Github","slug":"Github","permalink":"http://bendan.vip/tags/Github/"}],"keywords":[{"name":"HEXO","slug":"HEXO","permalink":"http://bendan.vip/categories/HEXO/"}]},{"title":"Hello World","slug":"hello-world","date":"2016-08-20T00:13:13.000Z","updated":"2016-08-23T01:03:49.259Z","comments":true,"path":"2016/08/20/hello-world/","link":"","permalink":"http://bendan.vip/2016/08/20/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[],"keywords":[]}]}