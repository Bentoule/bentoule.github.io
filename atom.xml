<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BenDan</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://bendan.vip/"/>
  <updated>2016-08-24T08:23:30.644Z</updated>
  <id>http://bendan.vip/</id>
  
  <author>
    <name>BenDan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title> Markdown语法介绍</title>
    <link href="http://bendan.vip/2016/08/24/Markdown%E8%AF%AD%E6%B3%95%E4%BB%8B%E7%BB%8D/"/>
    <id>http://bendan.vip/2016/08/24/Markdown语法介绍/</id>
    <published>2016-08-24T06:06:29.000Z</published>
    <updated>2016-08-24T08:23:30.644Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是Markdown语法？"><a href="#什么是Markdown语法？" class="headerlink" title="什么是Markdown语法？"></a>什么是Markdown语法？</h2><p>Markdown 是一种轻量级标记语言，目标是实现「易读易写」，通过简单的标记语法，它可以使普通文本内容具有一定的格式。</p>
<a id="more"></a>
<p><img src="/img/2016/08/24/1.png" alt=""></p>
<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>在Markdown中，你只需要在文本前面加上# 即可，同理、你还可以增加二级标题、三级标题、四级标题、五级标题和六级标题，总共六级，只需要增加# 即可，标题字号相应降低。例如：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 一级标题</span></div><div class="line"><span class="comment">## 二级标题</span></div><div class="line"><span class="comment">### 三级标题</span></div><div class="line"><span class="comment">#### 四级标题</span></div><div class="line"><span class="comment">##### 五级标题</span></div><div class="line"><span class="comment">###### 六级标题</span></div></pre></td></tr></table></figure>
<p>效果图如下：</p>
<p><img src="/img/2016/08/24/2.png" alt=""></p>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>Markdown 标记区块引用是使用类似 email 中用 &gt; 的引用方式，只需要在整个段落的第一行最前面加上 &gt; ：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; 时光静好，与君语；细水流年，与君同。-- BenDan</div></pre></td></tr></table></figure>
<p>效果图如下：<br><img src="/img/2016/08/24/3.png" alt=""></p>
<p>区块引用可以嵌套，只要根据层次加上不同数量的 &gt; ：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; 这是第一级引用。</div><div class="line">&gt;</div><div class="line">&gt; &gt; 这是第二级引用。</div><div class="line">&gt;</div><div class="line">&gt; 现在回到第一级引用。</div></pre></td></tr></table></figure>
<p>效果图如下：<br><img src="/img/2016/08/24/4.png" alt=""></p>
<p>引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&gt; <span class="comment">## 这是一个标题。</span></div><div class="line">&gt;</div><div class="line">&gt; <span class="number">1</span>. 这是第一行列表项。</div><div class="line">&gt; <span class="number">2</span>. 这是第二行列表项。</div><div class="line">&gt;</div><div class="line">&gt; 给出一些例子代码：</div><div class="line">&gt;</div><div class="line">&gt; <span class="keyword">return</span> shell_exec(<span class="string">"echo $input | $markdown_script"</span>);</div></pre></td></tr></table></figure>
<p>效果图如下：<br><img src="/img/2016/08/24/5.png" alt=""></p>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>列表项目标记通常放在最左边，项目标记后面要接一个字符的空格。</p>
<p><strong>无序列表：</strong>使用星号、加号或是减号作为列表标记</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- Red</div><div class="line">- Green</div><div class="line">- Blue</div></pre></td></tr></table></figure>
<p>效果图如下：<br><img src="/img/2016/08/24/6.png" alt=""></p>
<p><strong>有序列表：</strong>使用数字接着一个英文句点</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>. Red</div><div class="line"><span class="number">2</span>. Green</div><div class="line"><span class="number">3</span>. Blue</div></pre></td></tr></table></figure>
<p>效果图如下：<br><img src="/img/2016/08/24/7.png" alt=""></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>只要把你的代码块包裹在之间，你就不需要通过无休止的缩进来标记代码块了。 在围栏式代码块中，你可以指定一个可选的语言标识符，然后我们就可以为它启用语法着色了。 举个例子，这样可以为一段 Ruby 代码着色：</p>
<p><img src="/img/2016/08/24/8.png" alt=""><br>效果图如下：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">require</span> <span class="string">'redcarpet'</span></div><div class="line">markdown = Redcarpet.new(<span class="string">"Hello World!"</span>)</div><div class="line">puts markdown.to_html</div></pre></td></tr></table></figure>
<h2 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h2><p>在Markdown中，可以使用 * 和 _ 来表示斜体和加粗。</p>
<p>斜体：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">*BenDan 遇见你，真美好！*</div><div class="line">_BenDan 遇见你，真美好！<span class="number">_</span></div></pre></td></tr></table></figure></p>
<p>效果如下</p>
<p><em>BenDan 遇见你，真美好！</em><br><em>BenDan 遇见你，真美好！</em></p>
<h2 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a>自动链接</h2><p>方括号显示说明，圆括号内显示网址， Markdown 会自动把它转成链接，例如：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">[BenDan的博客](<span class="symbol">http:</span>/<span class="regexp">/bendan.vip)</span></div></pre></td></tr></table></figure>
<p>效果如下</p>
<p><a href="http://bendan.vip">BenDan的博客</a></p>
<p>或者也可以直接用&lt; &gt;，将网址或者邮箱地址放在中间，也能将地址直接转成链接：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;admin@3gjn.com&gt;</div></pre></td></tr></table></figure>
<p>效果如下</p>
<p><a href="&#109;&#x61;&#x69;&#x6c;&#x74;&#111;&#58;&#97;&#x64;&#x6d;&#105;&#x6e;&#64;&#x33;&#x67;&#106;&#x6e;&#46;&#99;&#x6f;&#x6d;">&#97;&#x64;&#x6d;&#105;&#x6e;&#64;&#x33;&#x67;&#106;&#x6e;&#46;&#99;&#x6f;&#x6d;</a></p>
<p>表格</p>
<p>在 Markdown 中，可以制作表格，例如：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;table&gt;</div><div class="line">   &lt;tr&gt;</div><div class="line">        &lt;td&gt;First Header&lt;/td&gt;</div><div class="line">        &lt;td&gt;Second Header&lt;/td&gt;</div><div class="line">        &lt;td&gt;Second Header&lt;/td&gt;</div><div class="line">   &lt;/tr&gt;</div><div class="line">  &lt;tr&gt;</div><div class="line">        &lt;td&gt;Content Cell&lt;/td&gt; </div><div class="line">        &lt;td&gt;Content Cell&lt;/td&gt; </div><div class="line">        &lt;td&gt;Content Cell&lt;/td&gt;</div><div class="line">  &lt;/tr&gt;</div><div class="line">&lt;/table&gt;</div></pre></td></tr></table></figure>
<p><html></html></p>
<p><table><br>   <tr><br>       <td>First Header</td><td>Second Header</td><td>Second Header</td><br>   </tr><br>  <tr><br>      <td>Content Cell</td> <td>Content Cell</td> <td>Content Cell</td><br>  </tr><br></table><br><br>顺便值得一体的是MarkDown 支持HTML语法。使用HTML我们可以实现很多小功能。</p>
<h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>在 Markdown 中，可以制作分割线，例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">---</div></pre></td></tr></table></figure>
<p>效果如下：</p>
<h2 id="分割线上部分内容"><a href="#分割线上部分内容" class="headerlink" title="分割线上部分内容"></a>分割线上部分内容</h2><p>分割线下部分内容</p>
<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>Markdown 使用了类似链接的语法来插入图片, 包含两种形式: 内联 和 引用.</p>
<p>内联图片语法如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![Alt text](/path/to/img.jpg)</div></pre></td></tr></table></figure></p>
<p>或<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![Alt text](/path/to/img.jpg &quot;Optional title&quot;)</div></pre></td></tr></table></figure></p>
<p>也就是:</p>
<p>一个感叹号: ! ; 紧跟一对方括号, 包含了可选填的图片 alt 属性; 紧跟一对圆括号, 包含了图片的 URL 或者路径, 以及一个可选的用单引号或双引号包裹的 title 属性.</p>
<p>引用图片语法如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">![Alt text][id]</div><div class="line"></div><div class="line">#“id” 是图片引用的名称. 图片引用使用链接定义的相同语法:</div><div class="line"></div><div class="line">[id]: url/to/image &quot;Optional title attribute&quot;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是Markdown语法？&quot;&gt;&lt;a href=&quot;#什么是Markdown语法？&quot; class=&quot;headerlink&quot; title=&quot;什么是Markdown语法？&quot;&gt;&lt;/a&gt;什么是Markdown语法？&lt;/h2&gt;&lt;p&gt;Markdown 是一种轻量级标记语言，目标是实现「易读易写」，通过简单的标记语法，它可以使普通文本内容具有一定的格式。&lt;/p&gt;
    
    </summary>
    
      <category term="HELP" scheme="http://bendan.vip/categories/HELP/"/>
    
    
      <category term="HEXO" scheme="http://bendan.vip/tags/HEXO/"/>
    
      <category term="Markdown" scheme="http://bendan.vip/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>GitHub+Hexo配置系列教程-Hexo+GitHub关联-三</title>
    <link href="http://bendan.vip/2016/08/23/GitHub-Hexo%E9%85%8D%E7%BD%AE%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-Hexo-GitHub%E5%85%B3%E8%81%94-%E4%B8%89/"/>
    <id>http://bendan.vip/2016/08/23/GitHub-Hexo配置系列教程-Hexo-GitHub关联-三/</id>
    <published>2016-08-23T08:43:57.000Z</published>
    <updated>2016-08-24T00:53:26.121Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇中我们介绍了如何配置GitHub端的具体操作,接下来,就是将Hexo与GitHub进行关联</p>
<h1 id="在Hexo配置文件中关联GitHub账号"><a href="#在Hexo配置文件中关联GitHub账号" class="headerlink" title="在Hexo配置文件中关联GitHub账号"></a>在Hexo配置文件中关联GitHub账号</h1><ul>
<li>1.找到刚才所建的目录(F:\Hexo下),编辑 _config.yml,拖到最下方,找到deploy标签,然后更为如下配置,注意:你自己在修改时,需要将 bentoule修改为自己的用户名 </li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">deploy: </div><div class="line"></div><div class="line"><span class="built_in">type</span>: git </div><div class="line"></div><div class="line">repository: git@github.com:bentoule/bentoule.github.io.git </div><div class="line"></div><div class="line">branch: master</div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>2.注意: 因yml格式问题,所有键值对的”:”冒号后面必须跟有一个空格</li>
<li>3.注意: 自Hexo 3.0以后,type类型都为 git,而非 github</li>
<li>4.然后在F:/Hexo目录下,右键,选择Git Bash,输入以下命令即可完成部署和同步<br>命令如下: </li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo generate <span class="comment">#或 hexo g </span></div><div class="line">$ hexo deploy <span class="comment">#或 hexo d</span></div></pre></td></tr></table></figure>
<ul>
<li><p>5.到此我们的博客已经完全搭建并关联起来了,现在在浏览器中访问bentoule.github.io即可看到自己的成就.<br>注意事项</p>
</li>
<li><p>每次在本地进行改动后,不管是什么改动,都需要在F:\Hexo 文件夹下打开Git Bash,执行hexo g</p>
</li>
<li>如果需要同步到github中,则在执行完hexo g命令后,再次执行hexo d即可</li>
<li>在执行hexo d命令时,会让输入你的github邮箱和密码,在输入密码时为了安全考虑,输入字符时是不会显示的,请放心输入</li>
<li>有的电脑在执行hexo d命令时,会出现ERROR Deployer not found: github 的错误提示,该错误原因有以下几点 </li>
</ul>
<blockquote>
<p>在_config.yml文件中,deploy模块中冒号后面没有加空格</p>
<p>将type类型写成了github,正确写法是git</p>
<p>在改文件夹下执行 npm install hexo-deployer-git –save 命令后重新执行 hexo d命令</p>
<p>将Git Bash命令关掉,重新打开执行 </p>
</blockquote>
<ul>
<li><p>6.在github端设置完成后,有时候直接访问会出现404错误,这是正常的,一般等待十分钟左右就可以访问了,如果还不行,可能是你在注册账号的时候没有验证邮箱中的邮件.</p>
</li>
<li><p>7.如遇到其他不可解决的问题,可以尝试删除.deploy_git文件夹及db.json,再次重新生成即可</p>
</li>
<li><h1 id="发布一篇文章"><a href="#发布一篇文章" class="headerlink" title="发布一篇文章"></a>发布一篇文章</h1></li>
</ul>
<p>既然博客已经搭建完毕,现在肯定想跃跃欲试,发布一篇博客,所以我们需要更改一些默认设置,来将站点打造成真正属于自己的网站.</p>
<p>博客配置一般需要用到两个文件,一个是对全局进行配置的<strong>_config.yml</strong>文件,另一个是对主题进行配置的文件(暂时还没有设置,找到后后续补充)</p>
<p>F:\Hexo_config.yml</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Hexo Configuration #</span></div><div class="line"><span class="comment"># Docs: https://hexo.io/docs/configuration.html #</span></div><div class="line"><span class="comment"># Source: https://github.com/hexojs/hexo/</span></div><div class="line"><span class="comment"># Site </span></div><div class="line">   title: Test <span class="comment">#网站名称 </span></div><div class="line">   subtitle: Test <span class="comment">#副标题,在titile下方可看到 </span></div><div class="line">   description: des <span class="comment">#描述,可自定义 </span></div><div class="line">   author: au <span class="comment">#作者,可以在左下角看到 </span></div><div class="line">   language: zh-CN <span class="comment">#中文 </span></div><div class="line">   timezone: PRC <span class="comment">#时区 People's Republic of China，中华人民共和国</span></div></pre></td></tr></table></figure>
<p><strong>现在可以执行hexo g和hexo d命令来查看更改的效果了.</strong></p>
<p>发布文章</p>
<ul>
<li>1.在F:\Hexo下打开Git Bash命令,执行hexo n “This my first blog”</li>
<li>2.创建成功后,就可以在F:\Hexo\source_posts中看到该md文件,在这里,可以使用MarkdownPad 2 或者 记事本 打开,然后进行自定义更改</li>
</ul>
<p><img src="/img/2016/08/23/11.png" alt=""></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> </div><div class="line">title: This my first blog <span class="comment">#这里是正文,可以更改</span></div><div class="line">date: 2016-03-21 22:58:49 <span class="comment">#时间戳,一般不改</span></div><div class="line">tags: Test <span class="comment">#分类标签 --- #下面是正文,可以使用Markdown语法进行书写</span></div></pre></td></tr></table></figure>
<ul>
<li>3.然后执行hexo g和hexo d命令,即可在github上查看效果</li>
</ul>
<blockquote>
<p>小贴士:当然,你也可以执行hexo g和hexo s命令在本地打开localhost:4000进行本地访问,然后在同步到GitHub上.</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上一篇中我们介绍了如何配置GitHub端的具体操作,接下来,就是将Hexo与GitHub进行关联&lt;/p&gt;
&lt;h1 id=&quot;在Hexo配置文件中关联GitHub账号&quot;&gt;&lt;a href=&quot;#在Hexo配置文件中关联GitHub账号&quot; class=&quot;headerlink&quot; title=&quot;在Hexo配置文件中关联GitHub账号&quot;&gt;&lt;/a&gt;在Hexo配置文件中关联GitHub账号&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;1.找到刚才所建的目录(F:\Hexo下),编辑 _config.yml,拖到最下方,找到deploy标签,然后更为如下配置,注意:你自己在修改时,需要将 bentoule修改为自己的用户名 &lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;deploy: &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;: git &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;repository: git@github.com:bentoule/bentoule.github.io.git &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;branch: master&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="HEXO" scheme="http://bendan.vip/categories/HEXO/"/>
    
    
      <category term="HEXO" scheme="http://bendan.vip/tags/HEXO/"/>
    
      <category term="HEXO配置" scheme="http://bendan.vip/tags/HEXO%E9%85%8D%E7%BD%AE/"/>
    
      <category term="Github" scheme="http://bendan.vip/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>GitHub+Hexo配置系列教程-GitHub配置(二)</title>
    <link href="http://bendan.vip/2016/08/23/GitHub-Hexo%E9%85%8D%E7%BD%AE%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-GitHub%E9%85%8D%E7%BD%AE-%E4%BA%8C/"/>
    <id>http://bendan.vip/2016/08/23/GitHub-Hexo配置系列教程-GitHub配置-二/</id>
    <published>2016-08-23T02:41:06.000Z</published>
    <updated>2016-08-23T08:36:17.494Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇中我们介绍了如何搭建Hexo本地博客,现在我们开始配置GitHub并进行关联Hexo</p>
<h1 id="GitHub端操作"><a href="#GitHub端操作" class="headerlink" title="GitHub端操作"></a>GitHub端操作</h1><p><strong>注册GitHub</strong></p>
<p>在此处进行注册,操作比较简单,再次就不多做赘述,不熟悉的百度查看一下教程.</p>
<p><strong>创建Repository</strong></p>
<p>在自己GitHub主页点击右上角,创建Repository </p>
<a id="more"></a>
<p><img src="/img/2016/08/23/1.png" alt=""></p>
<p>进入创建界面后,注意:<strong>名字一定要与用户名一致</strong>, 比如我的用户名是 bentoule,创建的Respository一定要是bentoule.github.io<br><img src="/img/2016/08/23/2.png" alt=""></p>
<p>然后点击<strong>Create repository</strong>按钮,然后进入到该respository界面,点击右边Settings, 拉到最下方,找到GitHub Pages模块,点击 <strong>Launch automatic page generator</strong>,让GitHub生成GitHubPager<br><img src="/img/2016/08/23/3.png" alt=""></p>
<p>然后进入下一页,点击页面右下角绿色框按钮<strong> Continue to layouts</strong>进入下一页<br><img src="/img/2016/08/23/4.png" alt=""></p>
<p>下一个界面是选择主题,但选择哪个无所谓,因为后面将要与Hexo关联,站点所有内容都将被Hexo博客所替换,所以直接点击<strong> Publish page </strong><br><img src="/img/2016/08/23/5.png" alt=""></p>
<p>然后,就可以进入到该界面,即代表设置完成,访问bentoule.github.io即可看到自己独立的该域名网站.<br><img src="/img/2016/08/23/6.png" alt=""></p>
<p>此时点击Settings进入即可看到如下提示:Your sit is published at <a href="http://bentoule.github.io" target="_blank" rel="external">http://bentoule.github.io</a><br><img src="/img/2016/08/23/7.png" alt=""></p>
<h1 id="配置SSH-Keys"><a href="#配置SSH-Keys" class="headerlink" title="配置SSH Keys"></a>配置SSH Keys</h1><p>SSH密钥是一个用来识别值得信赖的电脑在进行GitHub一些操作时,不用输入密码。用户可以生成一个SSH密钥，并按照本节所述的方法将公共密钥添加到你的GitHub帐户。</p>
<p>我们建议你定期检查SSH密钥列表，并删除任何一个长时间没有使用的秘钥.</p>
<blockquote>
<p>小贴士:如果你安装的有GitHub的桌面版 ，你可以用它来克隆库而不是进行SSH密钥处理。它还配备了Git的Bash的工具，这是在Windows上运行的git命令的首选方式。<br>检测电脑中是否已有SSH 秘钥</p>
</blockquote>
<p>在你生成SSH秘钥之前,如果你有任意一个SSH秘钥,你都要检测一下;</p>
<p><strong>检测步骤:</strong></p>
<ul>
<li>在任意目录右键,选择 Git Bash</li>
<li>输入 ls -al ~/.ssh 命令查看是否存在SSH秘钥 </li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ls -al ~/.ssh </div><div class="line"><span class="comment"># Lists the files in your .ssh directory, if they exist</span></div></pre></td></tr></table></figure>
<ul>
<li><p>如果你看到有公共的SSH秘钥已经存在的话,请检测SSH列表的路径;</p>
<p> 默认情况下,公共秘钥的文件名是下列之一:</p>
</li>
<li><p>id_dsa.pub</p>
</li>
<li>id_ecdsa.pub</li>
<li>id_ecdsa.pub</li>
<li>id_ecdsa.pub</li>
</ul>
<p>如果没有一个现有的公共和私有密钥，或者不希望使用任何可用的SSH秘钥来连接到GitHub上，请生成一个新的SSH密钥。</p>
<p>如果你看到列出现有的公共和私有密钥（例如id_rsa.pub和id_rsa ），你想使用连接到GitHub上，你可以将你的SSH密钥放到ssh-agent(下面会写到) .</p>
<blockquote>
<p>小贴士:如果你看到的〜/ .ssh不存在或者错误，不要担心！我们将创建它，并生成一个新的SSH密钥</p>
</blockquote>
<p><strong>生成新的SSH密钥并将其添加到ssh-agent中</strong></p>
<ul>
<li>在任意目录右键,选择Git Bash</li>
<li>输入ssh-keygen -t rsa -b 4096 -C “your_email@example.com” (将邮箱替换为你自己的地址)</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -b 4096 -C <span class="string">"your_email@example.com"</span></div><div class="line"><span class="comment"># Creates a new ssh key, using the provided email as a label</span></div><div class="line"><span class="comment">#Generating public/private rsa key pair.</span></div></pre></td></tr></table></figure>
<ul>
<li><p>当你提示“输入要保存密钥的文件”，然后按Enter键。接受默认文件位置。<br>Enter a file in which to save the key (/Users/you/.ssh/id_rsa): [Press enter]</p>
</li>
<li><p>在提示符下，键入一个安全密码(可以为空)。有关详细信息，请参阅“使用SSH密钥口令”一节。<br>Enter passphrase (empty for no passphrase): [Type a passphrase]<br>Enter same passphrase again: [Type passphrase again]</p>
</li>
<li><p>将ssh秘钥添加到 ssh-agent,在任意目录右键,选择Git Bash后输入命令确保ssh-agent的启用</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># start the ssh-agent in the background</span></div><div class="line">$ <span class="built_in">eval</span> <span class="string">"<span class="variable">$(ssh-agent -s)</span>"</span></div><div class="line"><span class="comment"># Agent pid 59566</span></div></pre></td></tr></table></figure>
<ul>
<li>添加你的SSH密钥到ssh-agent 。如果你使用现有的SSH密钥，而不是生成新的SSH密钥，你需要替换现有的私有密钥文件的名称，以取代id_rsa的命令</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-add ~/.ssh/id_rsa</div></pre></td></tr></table></figure>
<p><strong>添加新的SSH密钥到你的帐户GitHub中</strong></p>
<p>要配置GitHub的帐户需要使用新的（或现有的） SSH密钥，你还需要将其添加到你的帐户GitHub中。</p>
<p><strong>复制SSH密钥到剪贴板</strong></p>
<blockquote>
<p>小贴士:如果你的SSH密钥文件具有与示例代码不同的名称，请修改文件名，以符合当前的设置。当复制你的秘钥时，不添加任何新行或空格。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ clip &lt; ~/.ssh/id_rsa.pub</div><div class="line"><span class="comment"># Copies the contents of the id_rsa.pub file to your clipboard</span></div></pre></td></tr></table></figure>
<blockquote>
<p>小贴士:如果clip命令没有执行，你可以找到隐藏的.ssh文件夹中，打开你喜欢的文本编辑器文件，并将其复制到剪贴板,一般是在C:\Users\yourname.ssh文件夹下的id_rsa.pub文件中,使用文本文档打开后复制内容即可</p>
</blockquote>
<p><strong>在GitHub任何界面中,点击右上角个人资料照片,选择Settings </strong><br><img src="/img/2016/08/23/8.png" alt=""></p>
<p><strong>在用户设置栏中，点击SSH AND GPG keys</strong><br><img src="/img/2016/08/23/9.png" alt=""></p>
<ul>
<li>然后点击 New SSH key</li>
<li>在“Title”字段中，为新的密钥添加描述性标签。例如，如果您使用的是个人的Mac ，您可以调用这个关键的“个人的MacBook Air ” 。</li>
<li>粘贴刚才复制的秘钥值到“key”框中。 </li>
</ul>
<p><img src="/img/2016/08/23/10.png" alt=""></p>
<ul>
<li>然后点击Add SSH key</li>
<li>确认操作,然后输入你的GitHub密码。</li>
</ul>
<p><strong>测试SSH秘钥是否添加成功</strong></p>
<blockquote>
<p>小贴士:当你测试你的连接，你需要使用你的密码，这是你先前创建的SSH密钥密码来验证这个动作。有关使用SSH密钥口令的详细信息，请参阅”使用SSH密钥口令”一节。</p>
</blockquote>
<ul>
<li>在任意位置右键,打开Git Bash</li>
<li>输入以下命令ssh -T git@github.com</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ssh -T git@github.com</div><div class="line"><span class="comment"># Attempts to ssh to GitHub</span></div></pre></td></tr></table></figure>
<p><strong>你可能会看到这些警告之一：</strong></p>
<ul>
<li><p>The authenticity of host ‘github.com (192.30.252.1)’ can’t be established.RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48. Are you sure you want to continue connecting (yes/no)?</p>
</li>
<li><p>The authenticity of host ‘github.com (192.30.252.1)’ can’t be established.RSA key fingerprint is nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.Are you sure you want to continue connecting (yes/no)?</p>
</li>
</ul>
<blockquote>
<p>小贴士:上面的例子列出了GitHub的IP地址为192.30.252.1 。当侦测GitHub上，你可能会看到一个IP地址范围。有关更多信息，请参阅“<a href="https://help.github.com/articles/what-ip-addresses-does-github-use-that-i-should-whitelist/" target="_blank" rel="external">不GitHub上使用什么IP地址，我应该列入白名单？</a> ” </p>
</blockquote>
<p>验证你看到消息中的指纹相匹配的以下信息，然后输入 <strong>yes</strong></p>
<ul>
<li>Hi username! You’ve successfully authenticated, but GitHub does notprovide shell access.</li>
</ul>
<blockquote>
<p>小贴士:验证结果消息中包含的用户名。如果你看到一个包含“access denied “的错误,请参阅：”<a href="https://help.github.com/articles/error-permission-denied-publickey/" target="_blank" rel="external">权限被拒绝文档</a>”</p>
</blockquote>
<ul>
<li>如果你从HTTPS切换到SSH，你需要更新远程存储库的URL。</li>
</ul>
<p><em>ok,如果以上都完成了,那我们GitHub端的工作已经完成,接下来,就是Hexo+GitHub的关联配置</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上一篇中我们介绍了如何搭建Hexo本地博客,现在我们开始配置GitHub并进行关联Hexo&lt;/p&gt;
&lt;h1 id=&quot;GitHub端操作&quot;&gt;&lt;a href=&quot;#GitHub端操作&quot; class=&quot;headerlink&quot; title=&quot;GitHub端操作&quot;&gt;&lt;/a&gt;GitHub端操作&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;注册GitHub&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在此处进行注册,操作比较简单,再次就不多做赘述,不熟悉的百度查看一下教程.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;创建Repository&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在自己GitHub主页点击右上角,创建Repository &lt;/p&gt;
    
    </summary>
    
      <category term="HEXO" scheme="http://bendan.vip/categories/HEXO/"/>
    
    
      <category term="HEXO" scheme="http://bendan.vip/tags/HEXO/"/>
    
      <category term="HEXO配置" scheme="http://bendan.vip/tags/HEXO%E9%85%8D%E7%BD%AE/"/>
    
      <category term="Github" scheme="http://bendan.vip/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>GitHub+Hexo 配置系列教程 -HEXO配置 （一）</title>
    <link href="http://bendan.vip/2016/08/21/GitHub-Hexo-%E9%85%8D%E7%BD%AE%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-HEXO%E9%85%8D%E7%BD%AE-%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://bendan.vip/2016/08/21/GitHub-Hexo-配置系列教程-HEXO配置-（一）/</id>
    <published>2016-08-21T00:13:13.000Z</published>
    <updated>2016-08-23T02:11:41.204Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是Hexo"><a href="#什么是Hexo" class="headerlink" title="什么是Hexo"></a>什么是Hexo</h1><p>Hexo是一个快速、简洁且高效的博客框架,可以方便的生成静态网页托管在github和Heroku上。作者是来自台湾的@tommy351。引用@tommy351的话，Hexo:</p>
<a id="more"></a>
<ul>
<li><p>快速、简单且功能强大的 Node.js 博客框架。</p>
</li>
<li><p>A fast, simple &amp; powerful blog framework, powered by Node.js.</p>
</li>
</ul>
<p>类似于jekyll、Octopress、Wordpress，我们可以用hexo创建自己的博客，托管到github或Heroku上，绑定自己的域名，用markdown写文章。本博客即使用hexo创建并托管在github上。</p>
<h1 id="为什么要用Hexo来写博客"><a href="#为什么要用Hexo来写博客" class="headerlink" title="为什么要用Hexo来写博客"></a>为什么要用Hexo来写博客</h1><p>引用原作者的话来说: </p>
<ul>
<li><p>超快速度: Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。</p>
</li>
<li><p>支持 Markdown: Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。</p>
</li>
<li><p>一键部署: 只需一条指令即可部署到 GitHub Pages, Heroku 或其他网站。</p>
</li>
<li><p>丰富的插件: Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。</p>
</li>
</ul>
<p>另外,还有几个优点另Hexo这么风靡:</p>
<ul>
<li><p>易用. 部署的话,就算是小白,也很简单, 而且平时用到的命令仅需要 hexo new hexo server hexo generate hexo deploy四个命令即可,不像Jekyll需要很多繁琐的git命令,而且目前命令已经可以缩写成hexo n hexo d hexo s hexo g了,更加简单好记易用</p>
</li>
<li><p>轻便. 文件少,小,易理解,方便自定义更改</p>
</li>
<li><p>用户多. 用户的量级虽然比不上Jekyll,但遇到什么问题基本在网上搜索出来就能搞定了.</p>
</li>
</ul>
<h1 id="使用Hexo需要花多大的成本"><a href="#使用Hexo需要花多大的成本" class="headerlink" title="使用Hexo需要花多大的成本"></a>使用Hexo需要花多大的成本</h1><ul>
<li>这是一个免费的开源的博客框架,任何人都可以修改和使用</li>
<li>Hexo的使用需要使用到GitHub,Git,MardDown,Node.js这几种工具,另外部分插件,主题,widget需要自己安装,设置.所以使用Hexo相对有一些计算机基础的人比较简单, 但是即使是小白,只要按照这个教程,也可以很快的入手.</li>
</ul>
<h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>本博客所用Hexo版本为3.2.0,部分文件或与其他版本不同.<br>本教程只针对Windows版本,</p>
<h1 id="Hexo博客搭建"><a href="#Hexo博客搭建" class="headerlink" title="Hexo博客搭建"></a>Hexo博客搭建</h1><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p>推荐大家使用：msysgit <a href="https://git-for-windows.github.io/" title="点击这里前往官方网站下载" target="_blank" rel="external">https://git-for-windows.github.io/</a><br>下载并安装Git即可完成. </p>
<h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p>windows环境下的Node.js的安装很简单,只需要下载客户端一路next就行了,我选择的是<a href="http://https://nodejs.org/en/" target="_blank" rel="external">v6.4.0LTS版</a>本64位的 </p>
<ul>
<li>查看Node.js是否安装完成,在win+r中输入cmd命令窗口弹出后,输入node -v查看node版本</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node -v</div></pre></td></tr></table></figure>
<p><img src="/img/2016/08/21/1.png" alt=""></p>
<h2 id="安装Hexo-需要注意"><a href="#安装Hexo-需要注意" class="headerlink" title="安装Hexo (需要注意)"></a>安装Hexo (需要注意)</h2><p>利用命令行安装hexo</p>
<p>Node.js安装完成后,在电脑任意位置,右键,选择 GitBash ,执行npm命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g hexo</div></pre></td></tr></table></figure>
<p>创建本地hexo文件夹(地址名字可自定义)</p>
<p>安装完成后,在本地选择一个目标文件夹(如:F:\Hexo),注意:在F:\Hexo文件夹内右键,选择GitBush,执行以下指令,Hexo就会自动在目标文件夹下创建建立网站所需要的文件,一分钟左右会执行完成<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo init</div></pre></td></tr></table></figure></p>
<p><strong>效果如下:</strong></p>
<p><img src="/img/2016/08/21/2.png" alt=""></p>
<p>安装依赖包,该命令执行后没有什么提示,完成后的本地文件夹列表为图示,可能会有所不同<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo install</div></pre></td></tr></table></figure></p>
<p><strong>初始化完成后目录图:</strong><br><img src="/img/2016/08/21/3.png" alt=""></p>
<p>注意:因Hexo 3.0以后把服务器独立成了单独的模块,所以还需要安装hexo-server才可以使用,执行命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-server –save</div></pre></td></tr></table></figure></p>
<p><strong>本地校验查看</strong></p>
<p>到目前为止,我们已经搭建起本地的hexo博客了,执行以下命令(在F:\Hexo)中,然后根据提示到浏览器中进行访问,地址为 localhost:4000</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo g 或者 hexo generate</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo server 或者 hexo s</div></pre></td></tr></table></figure>
<p><strong>图示为: </strong><br><img src="/img/2016/08/21/4.png" alt=""></p>
<blockquote>
<p>如果访问成功,即代表了本地博客配置成功,但有以下几点需要注意</p>
</blockquote>
<ul>
<li>每次想访问本地博客,至少需要执行hexo s命令,这样才相当于服务启动,然后才可访问</li>
<li>有的电脑4000端口可能被占用,导致每次访问localhost:4000提示一直找不到网页,这时就需要修改端口号,执行命令 hexo s -p 5000 即代表使用-p将端口号改为了5000,访问网址为localhost:5000</li>
</ul>
<p><img src="/img/2016/08/21/5.png" alt=""></p>
<p><strong>成功图示 :</strong></p>
<p><img src="/img/2016/08/21/6.png" alt=""></p>
<p><strong>按下Ctrl+C即可停止服务</strong></p>
<p>如果进行到这一步,本地博客已经成功搭建起来了,当然只能在本地开启服务的时候才能访问,别人是看不到的,下面我们就要部署到GitHub上面,将Hexo与GitHub进行关联起来;</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;什么是Hexo&quot;&gt;&lt;a href=&quot;#什么是Hexo&quot; class=&quot;headerlink&quot; title=&quot;什么是Hexo&quot;&gt;&lt;/a&gt;什么是Hexo&lt;/h1&gt;&lt;p&gt;Hexo是一个快速、简洁且高效的博客框架,可以方便的生成静态网页托管在github和Heroku上。作者是来自台湾的@tommy351。引用@tommy351的话，Hexo:&lt;/p&gt;
    
    </summary>
    
      <category term="HEXO" scheme="http://bendan.vip/categories/HEXO/"/>
    
    
      <category term="HEXO" scheme="http://bendan.vip/tags/HEXO/"/>
    
      <category term="HEXO配置" scheme="http://bendan.vip/tags/HEXO%E9%85%8D%E7%BD%AE/"/>
    
      <category term="node.js" scheme="http://bendan.vip/tags/node-js/"/>
    
      <category term="GIT" scheme="http://bendan.vip/tags/GIT/"/>
    
      <category term="Github" scheme="http://bendan.vip/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://bendan.vip/2016/08/20/hello-world/"/>
    <id>http://bendan.vip/2016/08/20/hello-world/</id>
    <published>2016-08-20T00:13:13.000Z</published>
    <updated>2016-08-23T01:03:49.259Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.<br><a id="more"></a></p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
